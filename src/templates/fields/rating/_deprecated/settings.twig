{% import '_includes/forms' as forms %}

{{ forms.selectField({
    label: 'Rating Type'|t('formie'),
    instructions: 'Choose the type of rating display.'|t('formie'),
    id: 'ratingType',
    name: 'ratingType',
    value: field.ratingType,
    options: [
        { label: 'Star Rating', value: 'star' },
        { label: 'Emoji Rating', value: 'emoji' },
        { label: 'NPS (Number) Rating', value: 'nps' },
    ],
}) }}

<div id="emojiRenderModeContainer">
    {{ forms.selectField({
        label: 'Emoji Render Mode'|t('formie'),
        instructions: 'Choose how emoji ratings are rendered.'|t('formie'),
        id: 'emojiRenderMode',
        name: 'emojiRenderMode',
        value: field.emojiRenderMode ?? craft.app.plugins.getPlugin('formie-rating-field').settings.defaultEmojiRenderMode ?? 'system',
        options: [
            { label: 'System Emojis (Native platform emojis)', value: 'system' },
            { label: 'Noto Color Emoji (Detailed, colorful style)', value: 'noto-color' },
            { label: 'Noto Emoji (Simple, clean style)', value: 'noto-simple' },
        ],
    }) }}
</div>

{{ forms.selectField({
    label: 'Size'|t('formie'),
    instructions: 'Choose the size of the rating elements.'|t('formie'),
    id: 'ratingSize',
    name: 'ratingSize',
    value: field.ratingSize,
    options: [
        { label: 'Small', value: 'small' },
        { label: 'Medium', value: 'medium' },
        { label: 'Large', value: 'large' },
        { label: 'Extra Large', value: 'xlarge' },
    ],
}) }}

<div class="field">
    <div class="heading">
        <label>{{ 'Rating Range'|t('formie') }}</label>
        <div class="instructions">
            <p>{{ 'Set the minimum and maximum rating values.'|t('formie') }}</p>
        </div>
    </div>
    <div class="flex">
        <div class="flex-grow">
            {{ forms.selectField({
                label: 'Minimum'|t('formie'),
                id: 'minValue',
                name: 'minValue',
                value: field.minValue ?? (field.ratingType == 'nps' ? '0' : '1'),
                options: [
                    { label: '0', value: '0' },
                    { label: '1', value: '1' },
                ],
            }) }}
        </div>
        <div class="flex-grow">
            {{ forms.selectField({
                label: 'Maximum'|t('formie'),
                id: 'maxValue',
                name: 'maxValue',
                value: field.maxValue,
                options: [
                    { label: '3', value: '3' },
                    { label: '4', value: '4' },
                    { label: '5', value: '5' },
                    { label: '6', value: '6' },
                    { label: '7', value: '7' },
                    { label: '8', value: '8' },
                    { label: '9', value: '9' },
                    { label: '10', value: '10' },
                ],
            }) }}
        </div>
    </div>
</div>

<div id="halfRatingsContainer" class="{% if field.ratingType != 'star' %}hidden{% endif %}">
    {{ forms.lightswitchField({
        label: 'Allow Half Ratings'|t('formie'),
        instructions: 'Allow users to select half-star ratings (e.g., 3.5 stars).'|t('formie'),
        id: 'allowHalfRatings',
        name: 'allowHalfRatings',
        on: field.allowHalfRatings,
    }) }}
</div>

<div id="singleEmojiSelectionContainer" class="{% if field.ratingType != 'emoji' %}hidden{% endif %}">
    {{ forms.lightswitchField({
        label: 'Single Emoji Selection'|t('formie'),
        instructions: 'Highlight only the selected emoji instead of cumulative selection. When enabled, a custom label will display beneath the selected emoji.'|t('formie'),
        id: 'singleEmojiSelection',
        name: 'singleEmojiSelection',
        on: field.singleEmojiSelection,
    }) }}
</div>

{# Temporarily hidden until styling is finalized #}
{# {{ forms.lightswitchField({
    label: 'Show Selected Label'|t('formie'),
    instructions: 'Display the label of the selected rating value.'|t('formie'),
    id: 'showSelectedLabel',
    name: 'showSelectedLabel',
    on: field.showSelectedLabel,
}) }} #}

{{ forms.lightswitchField({
    label: 'Show Endpoint Labels'|t('formie'),
    instructions: 'Display labels at the start and end of the rating scale.'|t('formie'),
    id: 'showEndpointLabels',
    name: 'showEndpointLabels',
    on: field.showEndpointLabels,
    toggle: 'endpointLabelsContainer',
}) }}

<div id="endpointLabelsContainer" class="{% if not field.showEndpointLabels %}hidden{% endif %}">
    {{ forms.textField({
        label: 'Start Label'|t('formie'),
        instructions: 'Label for the lowest rating value.'|t('formie'),
        id: 'startLabel',
        name: 'startLabel',
        value: field.startLabel,
        placeholder: 'e.g., Not at all likely',
    }) }}

    {{ forms.textField({
        label: 'End Label'|t('formie'),
        instructions: 'Label for the highest rating value.'|t('formie'),
        id: 'endLabel',
        name: 'endLabel',
        value: field.endLabel,
        placeholder: 'e.g., Extremely likely',
    }) }}
</div>

<hr>

<div class="field">
    <div class="heading">
        <label>{{ 'Custom Labels'|t('formie') }}</label>
        <div class="instructions">
            <p>{{ 'Optionally set custom labels for each rating value. Leave blank to use the numeric value.'|t('formie') }}</p>
        </div>
    </div>
    <div id="customLabelsContainer">
        {# This will be populated by JavaScript based on min/max values #}
    </div>
</div>

{% js %}
    (function() {
        const ratingTypeSelect = document.getElementById('ratingType');
        const halfRatingsContainer = document.getElementById('halfRatingsContainer');
        const singleEmojiSelectionContainer = document.getElementById('singleEmojiSelectionContainer');
        const emojiRenderModeContainer = document.getElementById('emojiRenderModeContainer');
        const minValueInput = document.getElementById('minValue');
        const maxValueInput = document.getElementById('maxValue');
        const customLabelsContainer = document.getElementById('customLabelsContainer');

        // Emoji sets based on range size
        const emojis5 = ['üò¢', 'üòï', 'üòê', 'üòä', 'üòç'];
        const emojis8 = ['üò¢', 'üòï', 'üòê', 'üòä', 'üòç', 'ü§©', 'ü•∞', 'üòé'];
        const emojis11 = ['üò≠', 'üò¢', 'üòï', 'üòê', 'üòä', 'üòç', 'ü§©', 'ü•∞', 'üòé', 'ü§ó', 'ü•≥'];

        function getEmojiSet(count) {
            return count <= 5 ? emojis5 : (count <= 8 ? emojis8 : emojis11);
        }

        function toggleConditionalFields() {
            // Show/hide half ratings (star only)
            if (ratingTypeSelect.value === 'star') {
                halfRatingsContainer.classList.remove('hidden');
            } else {
                halfRatingsContainer.classList.add('hidden');
            }

            // Show/hide single emoji selection (emoji only)
            if (ratingTypeSelect.value === 'emoji') {
                singleEmojiSelectionContainer.classList.remove('hidden');
                emojiRenderModeContainer.classList.remove('hidden');
            } else {
                singleEmojiSelectionContainer.classList.add('hidden');
                emojiRenderModeContainer.classList.add('hidden');
            }

            // Update custom labels to show emojis if emoji type
            updateCustomLabels();
        }

        function updateCustomLabels() {
            const min = parseInt(minValueInput.value) || 1;
            const max = parseInt(maxValueInput.value) || 5;
            const count = max - min + 1;
            const existingLabels = {{ field.customLabels|json_encode|raw }};
            const isEmojiType = ratingTypeSelect.value === 'emoji';
            const emojis = getEmojiSet(count);

            customLabelsContainer.innerHTML = '';

            for (let i = min; i <= max; i++) {
                const emojiIndex = i - min;
                const emoji = isEmojiType && emojis[emojiIndex] ? emojis[emojiIndex] : '';

                const div = document.createElement('div');
                div.className = 'flex items-center mb-2';
                div.innerHTML = `
                    <label class="w-20" style="display: flex; align-items: center; gap: 4px;">
                        ${emoji ? `<span style="font-size: 20px;">${emoji}</span>` : ''}
                        <span>Value ${i}:</span>
                    </label>
                    <input type="text"
                        name="customLabels[${i}]"
                        value="${existingLabels[i] || ''}"
                        class="text fullwidth"
                        placeholder="${isEmojiType ? 'e.g., Terrible, Bad, Okay, Good, Excellent' : 'Label for ' + i}">
                `;
                customLabelsContainer.appendChild(div);
            }
        }

        ratingTypeSelect.addEventListener('change', toggleConditionalFields);
        minValueInput.addEventListener('change', updateCustomLabels);
        maxValueInput.addEventListener('change', updateCustomLabels);

        // Initialize
        toggleConditionalFields();
        updateCustomLabels();
    })();
{% endjs %}
